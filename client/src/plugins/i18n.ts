import { profile } from 'console'
import { access } from 'fs'
import { create, size, update } from 'lodash'
import { abort } from 'process'
import { createI18n } from 'vue-i18n'
import { en, de, ja, ca } from 'vuetify/locale'

export default createI18n({
  legacy: false,
  locale: 'de',
  fallbackLocale: 'en',
  messages: {
    en: {
      navigation: {
        pipelines: 'Pipelines',
        templates: 'Templates',
        activity: 'Activity',
        addOns: 'Add-Ons',
        accounts: 'Accounts',
        settings: 'Settings',
        logout: 'Logout',
        theme: 'Dark/Light Mode',
        documentation: 'Documentation',
      },
      global: {
        name: "Name",
        value: "Value",
        repository: "Repository",
        annotation: "Annotation",
        size: "Size",
        create: "Create",
        update: "Update",
        abort: "Abort",
        cancel: "Cancel",
        save: "Save",
      },
      pipeline: {
        name: 'Pipeline',
        buttons: {
          new: 'New @:pipeline.name',
          edit: 'Edit @:pipeline.name',
          delete: 'Delete @:pipeline.name',
          create: 'Create @:pipeline.name',
          update: 'Update @:pipeline.name',
          connect: 'Connect',
          disconnect: 'Disconnect',
          reconnect: 'Reconnect',
        },
        form: {
          label: {
            name: 'Name',
            fqdnDomain: 'FQDN Domain',
            teamAccess: 'Team Access',
            enableBuilds: 'Enable Pipeline to build from Source',
          },
          title:{
            continuousDeployment: 'Continuous Deployment',
            environments: 'Environments',
          },
          help: {
            gitrepo: 'When connected, webhooks and deployment keys are stored in the repository. This means that the apps configured in this project can be automatically redeployed with a \'git push\' and opening a PR starts a new instance in the "review" phase.',
          },
        },
      },
      app: {
        nav: {
          overview: 'Overview',
          builds: 'Builds',
          metrics: 'Metrics',
          logs: 'Logs',
          events: 'Events',
          vulnerabilities: 'Vulnerabilities',
        },
        actions: {
          name: 'Actions',
          edit: 'Edit',
          openApp: 'Open App',
          restart: 'Restart',
          openConsole: 'Open Console',
          downloadTemplate: 'Download Template',
          delete: 'Delete',
          update: 'Update',
        },
        domains: 'Domains',
        deploymentStrategy: 'Deployment Strategy',
        runpack: 'Runpack',
        buildStrategy: 'Build Strategy',
        gitRepo: 'Git Repository',
        autodeploy: 'Autodeploy',
        podSize: 'Pod Size',
        autoscale: 'Autoscale',
        webReplicas: 'Web Replicas',
        workerReplicas: 'Worker Replicas',
        titles: {
          advanced: 'Advanced App Settings',
          consumption: 'Resource Consumption',
          environmentVariables: 'Environment Variables',
          cronjobs: 'Cronjobs',
          activities: 'Activities',
          deployment: 'Deployment',
          resources: 'Resources',
          serviceAccountAnnotations: 'Service Account Annotations',
          volumes: 'Volumes',
          addOns: 'Add-Ons',
          basicAuth: 'Basic Auth',
          security: 'Security',
          networking: 'Networking',
          kubernetes: 'Kubernetes',
          healthChecks: 'Health Checks',
        },
        form: {
          createNewApp: 'Create a new App in {pipeline}',
          editApp: 'Edit {app} in {pipeline}',
          warning: 'Please change all passwords, tokens and select the correct storageClass for your cluster.',
          appName: 'App Name',
          domain: 'Domain',
          containerPort: 'Container Port',
          strategy: 'Strategy',
          advancedAppConfig: 'Advanced App Configuration',
          repository: 'Repository',
          branch: 'Branch',
          autodeploy: 'Autodeploy',
          runpack: 'Runpack',
          buildcommand: 'Build Command',
          runcommand: 'Run Command',
          containerImage: 'Conmtainer Image',
          tag: 'Tag',
          command: 'Command',
          basicAuthEnabled: 'Enable Basic Auth',
          basicAuthRealm: 'Realm/Title',
          basicAuthUser: 'Username',
          basicAuthPass: 'Password',
          readOnlyAppStorage: 'Read-Only App Volume',
          readOnlyRootFilesystem: 'Read-Only Root Filesystem',
          vulnerabililityScan: 'Enable Trivy vulnerabfility scans',
          privilegeEscalation: 'Allow Privilege Escalation',
          runAsNonRoot: 'Run as Non-Root',
          runAsUser: 'Run as User',
          runAsGroup: 'Run as Group',
          capabilitiesAdd: 'Add Capabilities',
          capabilitiesDrop: 'Drop Capabilities',
          whitelistSourceRange: 'Whitelist Source Range',
          denylistSourceRange: 'Denylist Source Range',
          forceSSLRedirect: 'Force SSL Redirect',
          proxyBufferSize: 'Proxy Buffer Size',
          ingressClassName: 'Ingress Class Name',
          corsEnable: 'Enable CORS',
          corsAllowOrigin: 'CORS Allow Origin',
          corsAllowMethods: 'CORS Allow Methods',
          corsAllowHeaders: 'CORS Allow Headers',
          corsExposeHeaders: 'CORS Expose Headers',
          corsAllowCredentials: 'CORS Allow Credentials',
          corsMaxAge: 'CORS Max Age',
          storageClass: 'Storage Class',
          mountPath: 'Mount Path',
          accessMode: 'Access Mode',
          healthCheckEnabled: 'Enable Health Check',
          healthCheckPath: 'Health Check Path',
          healthCheckStartupSeconds: 'Startup Seconds',
          healthCheckTimeoutSeconds: 'Timeout Seconds',
          healthCheckIntervalSeconds: 'Interval Seconds',
        },
        strategy: {
          name: 'Strategy',
          containerImage: 'Container Image',
          fromSource: 'Source Code',
          runpacks: 'Runpacks',
          runpackExplanation: 'Your code is build and running on official images. The code will be built for every pod in a init container. This is the fastes way, to run your code, but becomes more inefficient with every replica.',
          externalCICD: 'External CI/CD',
          externalCICDExplanation: 'You are building your image on a external CI/CD and deploy it by changing the image tag thrue the API.',
          nixpacks: 'Nixpacks',
          nixpacksExplanation: '<a href="https://nixpacks.com/" target="_blank" style="text-decoration: underline;">Nixpacks</a> is a open source project to build docker images with nix. It is a good way to build images without a Dockerfile, if you want to have a reproducable build process.',
          buildpacks: 'Buildpacks',
          buildpacksExplanation: '<a href="https://buildpacks.io/" target="_blank" style="text-decoration: underline;">Buildpacks</a> are a set of scripts and binaries used to transform application source code into a deployable image, automating the process of compiling, building, and configuring the app for deployment.',
          dockerfile: 'Dockerfile',
          dockerfileExplanation: 'Builds the image based on the Dockerfile in your git root directory. This allows for the highest level of customization.',
          noBuildPipeline: 'Buildpipeline not configured',
          noBuildPipelineExplanation: 'You can\'t build apps from source code, because the build pipeline is not configured. Configure the registry to use Buildpacks, Nickspacks and Dockerfile build pipelines.',
        },
        cronjobs: {
          name: 'Cronjobs',
          schedule: 'Schedule',
          command: 'Command',
          image: 'Image',
          env: 'Environment Variables',
          actions: {
            //name: 'Cronjobs',
            new: 'New Cronjob',
            edit: 'Edit Cronjob',
            delete: 'Delete Cronjob',
            create: 'Create Cronjob',
          },
        },
        volumes: {
          name: 'Volumes',
          size: 'Size',
          accessMode: 'Access Mode',
        },
        events: {
          name: 'Events',
          description: 'Kubernetes event stream for <strong>{app}</strong>',
          empty: {
            title: 'No events for {app}',
            message: 'The default TTL for events in the Kube-API is 1 hour. If you want to see older events, you have to increase the TTL in the Kube-apiserver.',
            link: 'Kubernetes Docs',
          }
        },
        vulnerabilities: {
          lastScan: 'Last Scan',
          artefact: 'Artifact',
          arch: 'Architecture',
          created: 'Created',
          os: 'OS',
          layers: 'Layers',
          workingDir: 'Working Directory',
          exposedPorts: 'Exposed Ports',
          summary: 'Summary',
          empty: {
            title: 'No vulnerabilityscans found for { app }',
            message: 'To scan this app for vulnerabilities, please trigger a rescan.',
          },
          actions: {
            rescan: 'Rescan',
          }
        },
      },
      profile: {
        titles: {
          apiTokens: 'API Tokens',
          profileDetails: 'Profile Details',
        },
        avatar: {
          edit: 'Edit Avatar',
          limitMessage: 'The image must not exceed 100KB.',
          uploadAvatar: 'Upload new Avatar',
        },
        token: {
          create: 'Create Token',
          expiresAt: 'Expires At',
          noTokens: 'No tokens found.',
          details: 'Token Details',
        }
      },
      $vuetify: {
        ...en,
      },
    },
    ja: {
      pipeline: {
        buttons: {
          new: '新しいパイプライン',
          edit: 'パイプラインを編集',
          delete: 'パイプラインを削除',
          create: 'パイプラインを作成',
          update: 'パイプラインを更新',
          connect: '接続',
          disconnect: '切断',
          reconnect: '再接続',
        },
        form: {
          label: {
            name: '名前',
            fqdnDomain: 'FQDNドメイン',
            teamAccess: 'チームアクセス',
            enableBuilds: 'ソースからのビルドを有効にする',
          },
          title:{
            continuousDeployment: '継続的デプロイメント',
            environments: '環境',
          },
        },
      },
      $vuetify: {
        ...ja,
      },
    },
    de: {
      global: {
        name: "Name",
        value: "Wert",
        repository: "Repository",
        annotation: "Annotation",
        size: "Größe",
        create: "Erstellen",
        update: "Aktualisieren",
      },
      navigation: {
        pipelines: 'Pipelines',
        templates: 'Templates',
        activity: 'Aktivitäten',
        addOns: 'Add-Ons',
        accounts: 'Accounts',
        settings: 'Einstellungen',
        logout: 'Logout',
        theme: 'Hell/Dunkel Modus',
        documentation: 'Dokumentation',
      },
      pipeline: {
        name: 'Pipeline',
        buttons: {
          new: 'Neue @:pipeline.name',
          edit: '@:pipeline.name bearbeiten',
          delete: '@:pipeline.name löschen',
          create: '@:pipeline.name erstellen',
          update: '@:pipeline.name aktualisieren',
          connect: 'Verbinden',
          disconnect: 'Trennen',
          reconnect: 'Verbindung erneuern',
        },
        form: {
          label: {
            name: 'Name',
            fqdnDomain: 'FQDN-Domain',
            teamAccess: 'Teamzugriff',
            enableBuilds: 'Pipeline zum Bauen aus Quellcode aktivieren',
            cluster: 'Cluster',
            clusterContext: 'Cluster Kontext',
            baseDomain: 'Basis-Domain',
          },
          title:{
            continuousDeployment: 'Kontinuierliches Deployment',
            environments: 'Umgebungen',
          },
          help: {
            gitrepo: 'Beim Verbinden werden Webhooks und Deployment-Schlüssel im Repository gespeichert. Das bedeutet, dass die in diesem Projekt konfigurierten Apps automatisch mit einem \'git push\' neu bereitgestellt werden können und das Öffnen eines PR eine neue Instanz in der "Review"-Phase startet.',
          },
        },
      },
      app: {
        nav: {
          overview: 'Übersicht',
          builds: 'Builds',
          metrics: 'Metriken',
          logs: 'Logs',
          events: 'Events',
          vulnerabilities: 'Sicherheitslücken',
        },
        actions: {
          name: 'Aktionen',
          edit: 'Bearbeiten',
          openApp: 'App öffnen',
          restart: 'Neustart',
          openConsole: 'Terminal öffnen',
          openLogs: 'Logs öffnen',
          downloadTemplate: 'Template herunterladen',
          delete: 'Löschen',
          update: 'Aktualisieren',
        },
        domains: 'Domains',
        deploymentStrategy: 'Deployment-Strategie',
        runpack: 'Runpack',
        buildStrategy: 'Build-Strategie',
        gitRepo: 'Git-Repository',
        autodeploy: 'Automatisches Deployment',
        podSize: 'Pod-Größe',
        autoscale: 'Automatisches Skalieren',
        webReplicas: 'Web-Replikas',
        workerReplicas: 'Worker-Replikas',
        titles: {
          advanced: 'Erweiterte App Einstellungen',
          consumption: 'Ressourcenverbrauch',
          environmentVariables: 'Umgebungsvariablen',
          cronjobs: 'Cronjobs',
          activities: 'Aktivitäten',
          deployment: 'Deployment',
          resources: 'Ressourcen',
          serviceAccountAnnotations: 'Service Account Annotations',
          volumes: 'Volumes',
          addOns: 'Add-Ons',
          basicAuth: 'Basic Auth',
          security: 'Sicherheit',
          networking: 'Netzwerk',
          kubernetes: 'Kubernetes',
          healthChecks: 'Health Checks',
        },
        form: {
          createNewApp: 'Neue App in {pipeline} erstellen',
          editApp: '{app} in {pipeline} bearbeiten',
          warning: 'Bitte ändere alle Passwörter, Tokens und wähle die korrekte StorageClass für deinen Cluster aus.',
          appName: 'App Name',
          domain: 'Domain',
          containerPort: 'Container Port',
          strategy: 'Strategie',
          advancedAppConfig: 'Erweiterte App-Konfiguration',
          repository: 'Repository',
          branch: 'Branch',
          autodeploy: 'Automatisches Deployment',
          runpack: 'Runpack',
          buildcommand: 'Build Command',
          runcommand: 'Run Command',
          containerImage: 'Conmtainer Image',
          tag: 'Tag',
          command: 'Command',
          basicAuthEnabled: 'Basic Auth aktivieren',
          basicAuthRealm: 'Realm/Titel',
          basicAuthUser: 'Username',
          basicAuthPass: 'Passwort',
          readOnlyAppStorage: 'Read-Only App Volume',
          readOnlyRootFilesystem: 'Read-Only Root Filesystem',
          vulnerabililityScan: 'Trivy vulnerabfility scans aktivieren',
          privilegeEscalation: 'Privilege Escalation erlauben',
          runAsNonRoot: 'Als Non-Root ausführen',
          runAsUser: 'Als User ausführen',
          runAsGroup: 'Als Gruppe ausführen',
          capabilitiesAdd: 'Capabilities hinzufügen',
          capabilitiesDrop: 'Capabilities entfernen',
          whitelistSourceRange: 'Whitelist Source Range',
          denylistSourceRange: 'Denylist Source Range',
          forceSSLRedirect: 'SSL Redirect forcieren',
          proxyBufferSize: 'Proxy Buffer Grösse',
          ingressClassName: 'Ingress Class Name',
          corsEnable: 'CORS aktivieren',
          corsAllowOrigin: 'CORS zugelassene Origin',
          corsAllowMethods: 'CORS zugelassene Methoden',
          corsAllowHeaders: 'CORS zugelassene Headers',
          corsExposeHeaders: 'CORS Expose Headers',
          corsAllowCredentials: 'CORS credentials erlauben',
          corsMaxAge: 'CORS Max Age',
          storageClass: 'Storage Class',
          mountPath: 'Mount Pfad',
          accessMode: 'Access Mode',
          healthCheckEnabled: 'Health Check aktivieren',
          healthCheckPath: 'Health Check Pfad',
          healthCheckStartupSeconds: 'Startup Sekunden',
          healthCheckTimeoutSeconds: 'Timeout Sekunden',
          healthCheckIntervalSeconds: 'Interval Sekunden',
        },
        strategy: {
          name: 'Strategie',
          containerImage: 'Container Image',
          fromSource: 'Quellcode',
          runpacks: 'Runpacks',
          runpackExplanation: 'Der Code wird auf offiziellen Images gebaut und läuft darauf. Der Code wird für jeden Pod in einem Init-Container gebaut. Dies ist der schnellste Weg, um deinen Code auszuführen, wird aber mit jeder Replikate ineffizienter.',
          externalCICD: 'External CI/CD',
          externalCICDExplanation: 'Du baust dein Image auf einem externen CI/CD und deployst es, indem du den Image-Tag über die API änderst.',
          nixpacks: 'Nixpacks',
          nixpacksExplanation: '<a href="https://nixpacks.com/" target="_blank" style="text-decoration: underline;">Nixpacks</a> ist ein Open-Source-Projekt zum Erstellen von Docker-Images mit Nix. Es ist eine gute Möglichkeit, Images ohne Dockerfile zu erstellen, wenn du einen reproduzierbaren Build-Prozess haben möchtest.',
          buildpacks: 'Buildpacks',
          buildpacksExplanation: '<a href="https://buildpacks.io/" target="_blank" style="text-decoration: underline;">Buildpacks</a> sind eine Sammlung von Skripten und Binärdateien, die verwendet werden, um Quellcode in ein bereitstellbares Image zu transformieren und den Prozess des Kompilierens, Bauens und Konfigurierens der App für die Bereitstellung zu automatisieren.',
          dockerfile: 'Dockerfile',
          dockerfileExplanation: 'Baut das Image basierend auf dem Dockerfile im Stammverzeichnis deines Git-Repositories. Dies ermöglicht den höchsten Grad an Anpassung.',
          noBuildPipeline: 'Buildpipeline nicht konfiguriert',
          noBuildPipelineExplanation: 'Du kannst Apps aus Quellcode nicht bauen, da die Build-Pipeline nicht konfiguriert ist. Konfiguriere das Registry, um Buildpacks, Nixpacks und Dockerfile-Build-Pipelines zu verwenden.',
        },
        cronjobs: {
          name: 'Cronjobs',
          schedule: 'Zeitplan',
          command: 'Befehl',
          image: 'Image',
          env: 'Umgebungsvariablen',
          actions: {
            //name: 'Cronjobs',
            new: 'Neuer Cronjob',
            edit: 'Cronjob bearbeiten',
            delete: 'Cronjob löschen',
            create: 'Cronjob erstellen',
          },
        },
        volumes: {
          name: 'Volumes',
          size: 'Größe',
          accessMode: 'Zugriffsmodus',
        },
        events: {
          name: 'Ereignisse',
          description: 'Kubernetes Ereignisstrom für <strong>{app}</strong>',
          empty: {
            title: 'Keine Ereignisse für "{app}"',
            message: 'Die Standard-Laufzeit (TTL) für Ereignisse in der Kube-API beträgt eine Stunde. Um ältere Ereignisse anzeigen zu können, ist es notwendig, die TTL im Kube-API-Server zu erhöhen.',
            link: 'Kubernetes Docs',
          }
        },
        vulnerabilities: {
          lastScan: 'Letzter Scan',
          artefact: 'Artifakt',
          arch: 'Architektur',
          created: 'Erstellt',
          os: 'Betriebssystem',
          layers: 'Layer',
          workingDir: 'Arbeitsverzeichnis',
          exposedPorts: 'Exponierte Ports',
          summary: 'Zusammenfassung',
          empty: {
            title: 'Keine Sicherheitslücken-Scans für { app } gefunden',
            message: 'Um diese App auf Sicherheitslücken zu scannen, bitte einen erneuten Scan auslösen.',
          },
          actions: {
            rescan: 'Erneut scannen',
          }
        },
      },
      profile: {
        titles: {
          apiTokens: 'API Tokens',
          profileDetails: 'Profil Details',
        },
        avatar: {
          edit: 'Avatar bearbeiten',
          limitMessage: 'Das Bild darf 100KB nicht überschreiten.',
          uploadAvatar: 'Neuen Avatar hochladen',
        },
        token: {
          create: 'Token erstellen',
          expiresAt: 'Läuft ab am',
          noTokens: 'Keine Tokens gefunden.',
          details: 'Token Details',
        }
      },
      $vuetify: {
        ...de,
      },
    }
  }
})